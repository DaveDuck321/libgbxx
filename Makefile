BUILD_DIR := build
LIBGB_BUILD_DIR := $(BUILD_DIR)/libgb
GAME_BUILD_DIR := $(BUILD_DIR)/game

CXX_OPTIONS := -Oz -g -MMD -MP -std=c++26 -Wall -Wpedantic -Werror -Wextra -Wno-variadic-macros
CXX_OPTIONS += -Ilibgb/include
ASM_OPTIONS := -g

CXX := $(GB_TOOLCHAIN)/clang++ --target=gb-unknown-unknown

AUTO_GENERATE_DIR := libgb/include/libgb/arch/generated
AUTO_GENERATE_SCRIPT := register_gen/generate_hpp.py
AUTO_GENERATE := python $(AUTO_GENERATE_SCRIPT)

AUTOGENERATED_HEADERS = \
	$(AUTO_GENERATE_DIR)/enums.hpp \
	$(AUTO_GENERATE_DIR)/accessors.hpp

LIBGB_OBJECTS = \
	$(LIBGB_BUILD_DIR)/int_handlers.o \
	$(LIBGB_BUILD_DIR)/interrupts.o \
	$(LIBGB_BUILD_DIR)/meta.o \
	$(LIBGB_BUILD_DIR)/runtime.o
LIBGB_DEPS = $(LIBGB_OBJECTS:.o=.d)

GAME_OBJECTS = \
	$(GAME_BUILD_DIR)/game.o
GAME_DEPS = $(GAME_OBJECTS:.o=.d)

.PHONY: default
default: $(AUTOGENERATED_HEADERS) game.rom

.PHONY: clean
clean:
	rm -r $(BUILD_DIR)
	rm $(AUTOGENERATED_HEADERS)

$(LIBGB_BUILD_DIR) $(GAME_BUILD_DIR):
	mkdir -p $@

-include $(LIBGB_DEPS)
$(AUTO_GENERATE_DIR)/enums.hpp: register_gen/registers.json $(AUTO_GENERATE_SCRIPT)
	$(AUTO_GENERATE) $< -o $@ --type enum

$(AUTO_GENERATE_DIR)/accessors.hpp: register_gen/registers.json $(AUTO_GENERATE_SCRIPT)
	$(AUTO_GENERATE) $< -o $@ --type accessors

# TODO: compile this as part of the toolchain
$(LIBGB_BUILD_DIR)/runtime.o: $(GB_TOOLCHAIN)/../../gameboy-tooling/runtime.s
	$(CXX) -c $< -o $@

$(LIBGB_BUILD_DIR)/%.o: libgb/%.cpp $(AUTOGENERATED_HEADERS) | $(LIBGB_BUILD_DIR)
	$(CXX) $(CXX_OPTIONS) -fdata-sections -c $< -o $@

$(LIBGB_BUILD_DIR)/%.o: libgb/%.s $(AUTOGENERATED_HEADERS) | $(LIBGB_BUILD_DIR)
	$(CXX) $(ASM_OPTIONS) -c $< -o $@

-include $(GAME_DEPS)
$(GAME_BUILD_DIR)/%.o: game/%.cpp $(AUTOGENERATED_HEADERS) | $(GAME_BUILD_DIR)
	$(CXX) $(CXX_OPTIONS) -c $< -o $@

$(GAME_BUILD_DIR)/game.out: $(GAME_OBJECTS) $(LIBGB_OBJECTS) | $(GAME_BUILD_DIR)
	$(CXX) $^ -o $@

game.rom: $(GAME_BUILD_DIR)/game.out
	$(GB_TOOLCHAIN)/llvm-objcopy -O binary $< $@ --gap-fill 0
